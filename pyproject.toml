[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "my-buddy"
version = "1.0.0"
description = "AI Travel Assistant - Your Smart Travel Companion"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    {name = "My Buddy Team"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Web Framework & API
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database & ORM
    "sqlmodel>=0.0.14",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.9",
    
    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "bcrypt>=4.1.2",
    
    # Caching & Session Management
    "redis>=5.0.1",
    "aioredis>=2.0.1",
    
    # HTTP Client & External APIs
    "httpx>=0.25.0",
    "aiohttp>=3.9.1",
    "requests>=2.31.0",
    "googlemaps>=4.10.0",
    
    # AI & ML Libraries
    "openai>=1.3.9",
    "openai-whisper>=20231117",
    "transformers>=4.36.0",
    "torch>=2.1.0",
    "torchaudio>=2.1.0",
    "sentence-transformers>=2.2.2",
    
    # Computer Vision & OCR
    "opencv-python>=4.8.0",
    "pytesseract>=0.3.10",
    "Pillow>=10.1.0",
    "pdf2image>=1.16.3",
    
    # Audio Processing
    "librosa>=0.10.1",
    "soundfile>=0.12.1",
    "pydub>=0.25.1",
    
    # Natural Language Processing
    "spacy>=3.7.2",
    "nltk>=3.8.1",
    
    # Data Processing & Utilities
    "numpy>=1.26.0",
    "pandas>=2.1.4",
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",
    "pycountry>=23.12.11",
    
    # File Processing
    "python-magic>=0.4.27",
    "python-docx>=1.1.0",
    "openpyxl>=3.1.2",
    
    # Logging & Monitoring
    "structlog>=23.2.0",
    "sentry-sdk[fastapi]>=1.39.1",
    "prometheus-client>=0.19.0",
    
    # Configuration & Environment
    "python-dotenv>=1.0.0",
    "environs>=11.0.0",
    
    # Async & Concurrency
    "anyio>=4.2.0",
    
    # Validation & Serialization
    "marshmallow>=3.20.1",
    
    # Geographic & Location Services
    "geopy>=2.4.1",
    
    # Retry & Resilience
    "tenacity>=8.2.0",
    
    # Production Server
    "gunicorn>=21.2.0",
]

[project.optional-dependencies]
dev = [
    # Testing Framework
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-html>=4.1.1",
    "pytest-benchmark>=4.0.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "responses>=0.24.1",
    "httpx>=0.25.0",
    
    # Code Quality & Linting
    "ruff>=0.1.6",
    "black>=23.11.0",
    "isort>=5.13.2",
    "mypy>=1.7.0",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    
    # Pre-commit Hooks
    "pre-commit>=3.6.0",
    
    # Development Tools
    "ipython>=8.17.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.6",
    "watchdog>=3.0.0",
    "debugpy>=1.8.0",
    
    # API Documentation
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.14",
    
    # Load Testing
    "locust>=2.17.0",
    
    # Database Development
    "pgcli>=3.5.0",
    "sqlparse>=0.4.4",
]

test = [
    # Core Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "httpx>=0.25.0",
    
    # Test Data & Factories
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "responses>=0.24.1",
    
    # Performance Testing
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.1",
]

docs = [
    # Documentation Generation
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.14",
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.25.2",
    "myst-parser>=2.0.0",
]

monitoring = [
    # Monitoring & Observability
    "sentry-sdk[fastapi]>=1.39.1",
    "prometheus-client>=0.19.0",
]

[project.urls]
Homepage = "https://github.com/aoddy10/idf-my-buddy"
Repository = "https://github.com/aoddy10/idf-my-buddy"
Issues = "https://github.com/aoddy10/idf-my-buddy/issues"

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
per-file-ignores = {"__init__.py" = ["F401"], "tests/**/*" = ["ARG", "SIM"]}

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "googlemaps.*",
    "whisper.*",
    "librosa.*", 
    "soundfile.*",
    "cv2.*",
    "pytesseract.*",
    "spacy.*",
    "transformers.*",
    "torch.*",
    "redis.*",
    "polyglot.*"
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort] 
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--tb=short",
    "--cov=app",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "ai: marks tests as AI service tests", 
    "database: marks tests as database tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests"
]

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
